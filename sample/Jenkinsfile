pipeline {
    agent any

    tools {
        gradle 'gradle-8.11.1'
        jdk 'jdk-17'
    }

    environment {
        // 테스트용 이미지 사용
        DOCKERHUB_USERNAME = '1pro'
        GITHUB_URL = 'https://github.com/k8s-1pro/kubernetes-anotherclass-sprint2.git'

        // 가변 경로
        CLASS_NUM = 'sample'
    }

    stages {
        stage('소스파일 체크아웃') {
            steps {
                // 소스코드를 가져올 Github 주소
                git branch: 'main', url: 'https://github.com/k8s-1pro/kubernetes-anotherclass-api-tester.git'
            }
        }

        stage('소스 빌드') {
            steps {
                // 755권한 필요 (윈도우에서 Git으로 소스 업로드시 권한은 644)
                echo "chmod +x ./gradlew"
                echo "gradle clean build"
            }
        }

        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                    extensions: [[$class: 'SparseCheckoutPaths',
                    sparseCheckoutPaths: [[path: "/${CLASS_NUM}"]]]],
					userRemoteConfigs: [[url: "${GITHUB_URL}"]])
            }
        }

        stage('컨테이너 빌드') {
            steps {
                // jar 파일 복사
                echo "cp ./build/libs/app-0.0.1-SNAPSHOT.jar ./${CLASS_NUM}/build/docker/app-0.0.1-SNAPSHOT.jar"

                // 도커 빌드
                echo "docker build -t ${DOCKERHUB_USERNAME}/api-tester:v1.0.0 ./${CLASS_NUM}/build/docker"
            }
        }

        stage('컨테이너 업로드') {
            steps {
                // DockerHub로 이미지 업로드
                echo "docker push ${DOCKERHUB_USERNAME}/api-tester:v1.0.0"
            }
        }

        stage('헬름 템플릿 확인') {
            steps {
                // helm template {배포명} {패키지경로} -n {네임스페이스} : K8S에 배포전에 배포할 yaml 파일들 출력하여 확인하기 위한 명령어
                sh "helm template api-tester-${CLASS_NUM} ./${CLASS_NUM}/deploy/helm/api-tester -n anotherclass-222 --create-namespace"
            }
        }

        stage('헬름 배포') {
            steps {
                input message: '배포 시작', ok: "Yes"
                // helm upgrade {배포명} {패키지경로} -n {네임스페이스} :
                // --create-namespace 옵션 : 해당 helm차트 배포시 해당하는 namespace없으면, namespace 만들고 리소스 생성하게 해주는 옵션
                // helm install -> kubectl create 와 같음
                // helm upgrade -> kubectl patch 와 같음
                // helm upgrade ... --install : helm이 알아서 install할지, upgrade할지 판단하고 적용(kubectl apply) 해줌
                sh "helm upgrade api-tester-${CLASS_NUM} ./${CLASS_NUM}/deploy/helm/api-tester -n anotherclass-222 --create-namespace --install"
            }
        }
    }
}